defmodule BlogWeb.Services.CloudStorageTest do
  use ExUnit.Case, async: true

  alias BlogWeb.Services.CloudStorage

  # Mock ExAws.S3 for testing purposes
  defp mock_s3_put_object_success(_bucket, _key, _file_binary, _opts) do
    {:ok, %{status_code: 200, headers: [], body: ""}}
  end

  defp mock_s3_put_object_failure(_bucket, _key, _file_binary, _opts) do
    {:error, :mock_upload_failed}
  end

  defp mock_s3_delete_object_success(_bucket, _key) do
    {:ok, %{status_code: 204, headers: [], body: ""}}
  end

  defp mock_s3_delete_object_failure(_bucket, _key) do
    {:error, :mock_delete_failed}
  end

  setup do
    # Override ExAws.S3 functions for testing
    Mox.stub_with(ExAws.S3, self())
    :ok
  end

  describe "upload_image/3" do
    test "successfully uploads an image and returns public URL" do
      expect(ExAws.S3, :put_object, fn bucket, key, file_binary, opts ->
        assert bucket == "test-bucket"
        assert key =~ ~r/^blog\/images\/\d+-[a-zA-Z0-9_-]{11}\.jpg$/
        assert file_binary == "file_content"
        assert opts[:content_type] == "image/jpeg"
        assert opts[:acl] == :public_read
        mock_s3_put_object_success(bucket, key, file_binary, opts)
      end)

      expect(ExAws, :request, fn _ ->
        {:ok, %{}}
      end)

      Application.put_env(:blog, :s3_bucket, "test-bucket")
      Application.put_env(:ex_aws, :region, "us-east-1")

      {:ok, url} = CloudStorage.upload_image("file_content", "test.jpg", "image/jpeg")
      assert url =~ ~r/^https:\/\/test-bucket\.s3\.us-east-1\.amazonaws\.com\/blog\/images\/\d+-[a-zA-Z0-9_-]{11}\.jpg$/
    end

    test "returns error if upload fails" do
      expect(ExAws.S3, :put_object, fn bucket, key, file_binary, opts ->
        mock_s3_put_object_failure(bucket, key, file_binary, opts)
      end)

      expect(ExAws, :request, fn _ ->
        {:error, :mock_upload_failed}
      end)

      Application.put_env(:blog, :s3_bucket, "test-bucket")

      {:error, reason} = CloudStorage.upload_image("file_content", "test.png", "image/png")
      assert reason == :upload_failed
    end
  end

  describe "delete_image/1" do
    test "successfully deletes an image" do
      public_url = "https://test-bucket.s3.us-east-1.amazonaws.com/blog/images/123-abc.jpg"

      expect(ExAws.S3, :delete_object, fn bucket, key ->
        assert bucket == "test-bucket"
        assert key == "blog/images/123-abc.jpg"
        mock_s3_delete_object_success(bucket, key)
      end)

      expect(ExAws, :request, fn _ ->
        {:ok, %{}}
      end)

      Application.put_env(:blog, :s3_bucket, "test-bucket")

      assert :ok == CloudStorage.delete_image(public_url)
    end

    test "returns error if deletion fails" do
      public_url = "https://test-bucket.s3.us-east-1.amazonaws.com/blog/images/123-abc.jpg"

      expect(ExAws.S3, :delete_object, fn bucket, key ->
        mock_s3_delete_object_failure(bucket, key)
      end)

      expect(ExAws, :request, fn _ ->
        {:error, :mock_delete_failed}
      end)

      Application.put_env(:blog, :s3_bucket, "test-bucket")

      {:error, reason} = CloudStorage.delete_image(public_url)
      assert reason == :delete_failed
    end
  end

  describe "validate_image/1" do
    test "returns :ok for supported image types and size" do
      upload = %Plug.Upload{filename: "test.jpg", content_type: "image/jpeg", path: "/tmp/test.jpg", size: 100}
      assert :ok == CloudStorage.validate_image(upload)

      upload = %Plug.Upload{filename: "test.png", content_type: "image/png", path: "/tmp/test.png", size: 1024 * 1024}
      assert :ok == CloudStorage.validate_image(upload)
    end

    test "returns error for unsupported file type" do
      upload = %Plug.Upload{filename: "test.txt", content_type: "text/plain", path: "/tmp/test.txt", size: 100}
      assert {:error, :unsupported_file_type} == CloudStorage.validate_image(upload)
    end

    test "returns error for file too large" do
      upload = %Plug.Upload{filename: "test.jpg", content_type: "image/jpeg", path: "/tmp/test.jpg", size: 11 * 1024 * 1024}
      assert {:error, :file_too_large} == CloudStorage.validate_image(upload)
    end
  end
end
